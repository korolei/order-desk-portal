{"version":3,"sources":["webpack:///./src/app/core/enums/case-management-status.enum.ts","webpack:///./src/app/customer/all-orders/all-orders.component.css","webpack:///./src/app/customer/all-orders/all-orders.component.html","webpack:///./src/app/customer/all-orders/all-orders.component.ts","webpack:///./src/app/customer/case-management/case-management.component.html","webpack:///./src/app/customer/case-management/case-management.component.ts","webpack:///./src/app/customer/customer-routing.module.ts","webpack:///./src/app/customer/customer.component.html","webpack:///./src/app/customer/customer.component.ts","webpack:///./src/app/customer/customer.module.ts","webpack:///./src/app/customer/customer.service.ts","webpack:///./src/app/customer/dialogs/notes/notes.component.html","webpack:///./src/app/customer/dialogs/notes/notes.component.ts","webpack:///./src/app/customer/install-base/install-base.component.html","webpack:///./src/app/customer/install-base/install-base.component.ts","webpack:///./src/app/customer/models/case-management.ts","webpack:///./src/app/customer/models/install-base.ts","webpack:///./src/app/customer/models/quick-account-aging.ts","webpack:///./src/app/customer/open-orders/open-orders.component.html","webpack:///./src/app/customer/open-orders/open-orders.component.ts","webpack:///./src/app/customer/open-quotes/open-quotes.component.html","webpack:///./src/app/customer/open-quotes/open-quotes.component.ts","webpack:///./src/app/customer/quick-account-aging/quick-account-aging.component.html","webpack:///./src/app/customer/quick-account-aging/quick-account-aging.component.ts"],"names":[],"mappings":"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","file":"customer-customer-module.js","sourcesContent":["export enum CaseManagementStatus {\r\n  Active = 'Active',\r\n  Resolved = 'Resolved',\r\n  Emergency = 'Emergency'\r\n}\r\n","module.exports = \"\"","module.exports = \"<ng-template #loading>\\r\\n    <mat-spinner color=\\\"primary\\\" diameter=\\\"50\\\" strokeWidth=\\\"20\\\" value=\\\"100\\\"></mat-spinner>\\r\\n  </ng-template>\\r\\n  <mat-card fxFlex=\\\"0 1 100%\\\">\\r\\n    <mat-card-header>\\r\\n      <mat-card-title>\\r\\n        All Sales Orders\\r\\n        <span *ngIf=\\\"ordersData.length > 0\\\" class=\\\"mat-body-1\\\">(6 of {{ordersData.length}}) |</span>\\r\\n        <a (click)=\\\"toggleView(0)\\\" mat-button>Back</a>\\r\\n      </mat-card-title>\\r\\n    </mat-card-header>\\r\\n    <mat-card-content>\\r\\n      <table mat-table [dataSource]=\\\"dataSource\\\" *ngIf=\\\"ordersData.length > 0; else loading\\\"\\r\\n             matSort class=\\\"mat-elevation-z8\\\" fxFlexFill>\\r\\n        <ng-container matColumnDef=\\\"quoteNumber\\\">\\r\\n          <th mat-header-cell *matHeaderCellDef> Quotation </th>\\r\\n          <td mat-cell *matCellDef=\\\"let element\\\">\\r\\n            {{element.quoteNumber}}\\r\\n          </td>\\r\\n        </ng-container>\\r\\n\\r\\n        <ng-container matColumnDef=\\\"soldToBPName\\\">\\r\\n          <th mat-header-cell *matHeaderCellDef mat-sort-header> BP Name </th>\\r\\n          <td mat-cell *matCellDef=\\\"let element\\\"> {{element.soldToBPName}} </td>\\r\\n        </ng-container>\\r\\n\\r\\n        <ng-container matColumnDef=\\\"soldToBP\\\">\\r\\n          <th mat-header-cell *matHeaderCellDef mat-sort-header> BP # </th>\\r\\n          <td mat-cell *matCellDef=\\\"let element\\\"> {{element.soldToBP}} </td>\\r\\n        </ng-container>\\r\\n\\r\\n        <ng-container matColumnDef=\\\"totalUSD\\\">\\r\\n          <th mat-header-cell *matHeaderCellDef mat-sort-header> Total $</th>\\r\\n          <td mat-cell *matCellDef=\\\"let element\\\"> {{element.totalUSD | currency}} </td>\\r\\n        </ng-container>\\r\\n\\r\\n        <ng-container matColumnDef=\\\"plannedDeliveryDate\\\">\\r\\n          <th mat-header-cell *matHeaderCellDef mat-sort-header> Planned Delivery </th>\\r\\n          <td mat-cell *matCellDef=\\\"let element\\\"> {{element.plannedDeliveryDate | date: 'yyyy-MM-dd'}} </td>\\r\\n        </ng-container>\\r\\n\\r\\n        <ng-container matColumnDef=\\\"plannedReceiptDate\\\">\\r\\n          <th mat-header-cell *matHeaderCellDef mat-sort-header> Promised Date </th>\\r\\n          <td mat-cell *matCellDef=\\\"let element\\\"> {{element.plannedReceiptDate | date: 'yyyy-MM-dd'}} </td>\\r\\n        </ng-container>\\r\\n\\r\\n        <ng-container matColumnDef=\\\"postalAddress\\\">\\r\\n          <th mat-header-cell *matHeaderCellDef mat-sort-header> Postal Code </th>\\r\\n          <td mat-cell *matCellDef=\\\"let element\\\"> {{element.postalAddress}} </td>\\r\\n        </ng-container>\\r\\n\\r\\n        <ng-container matColumnDef=\\\"quotationStatus\\\">\\r\\n          <th mat-header-cell *matHeaderCellDef mat-sort-header> Status </th>\\r\\n          <td mat-cell *matCellDef=\\\"let element\\\"\\r\\n              [className]=\\\"(element.quotationStatus === internalHold || element.quotationStatus === creditHold) ? 'warn':''\\\">\\r\\n            {{element.quotationStatus}}\\r\\n          </td>\\r\\n        </ng-container>\\r\\n        <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\r\\n        <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\r\\n      </table>\\r\\n      <mat-paginator ></mat-paginator>\\r\\n    </mat-card-content>\\r\\n  </mat-card>\\r\\n\"","import {Component, Input, OnInit, ViewChild} from '@angular/core';\r\nimport {ISalesOrder, SalesOrder} from \"../../shared/models/sales-order\";\r\nimport {AppSettings} from \"../../core/app-settings\";\r\nimport {MatPaginator, MatSort, MatTableDataSource} from \"@angular/material\";\r\nimport {AppService} from \"../../app.service\";\r\nimport {CustomerService} from \"../customer.service\";\r\n\r\n@Component({\r\n  selector: 'app-all-orders',\r\n  templateUrl: './all-orders.component.html',\r\n  styleUrls: ['./all-orders.component.css']\r\n})\r\nexport class AllOrdersComponent implements OnInit {\r\n  @Input() contactId;\r\n  @ViewChild(MatPaginator) paginator: MatPaginator;\r\n  @ViewChild(MatSort) sort: MatSort;\r\n\r\n  ordersData: SalesOrder[]=[];\r\n  dataSource: MatTableDataSource<SalesOrder>;\r\n  displayedColumns: string[] = [\r\n    'quoteNumber', 'soldToBPName', 'soldToBP',\r\n    'totalUSD', 'plannedDeliveryDate', 'plannedReceiptDate','postalAddress', 'quotationStatus'\r\n  ];\r\n  internalHold = 'Internal Hold';\r\n  creditHold = 'Credit Hold';\r\n\r\n  constructor(public appService: AppService, public customerService: CustomerService) { }\r\n\r\n  ngOnInit() {\r\n    this.appService.getData<ISalesOrder[]>(AppSettings.allSalesOrderApi)\r\n      .subscribe(data =>\r\n      {\r\n        this.ordersData = (data as ISalesOrder[]).map(item => new SalesOrder(item as ISalesOrder));\r\n        this.dataSource = new MatTableDataSource<SalesOrder>(this.ordersData);\r\n        this.paginator.pageSize=10;\r\n        this.dataSource.paginator = this.paginator;\r\n        this.dataSource.sort = this.sort;\r\n      });\r\n  }\r\n\r\n  toggleView(viewIndex: number) {\r\n    this.customerService.viewIndx.next(viewIndex);\r\n  }\r\n}\r\n","module.exports = \"\\r\\n  <mat-table [dataSource]=\\\"dataSource\\\" class=\\\"mat-elevation-z8\\\">\\r\\n    <ng-container matColumnDef=\\\"ticketNumber\\\">\\r\\n      <mat-header-cell *matHeaderCellDef> Ticket # </mat-header-cell>>\\r\\n      <mat-cell *matCellDef=\\\"let element\\\">\\r\\n        {{element.ticketNumber}}\\r\\n      </mat-cell>>\\r\\n    </ng-container>\\r\\n    <ng-container matColumnDef=\\\"dateOpened\\\">\\r\\n      <mat-header-cell *matHeaderCellDef> Date Opened </mat-header-cell>>\\r\\n      <mat-cell *matCellDef=\\\"let element\\\"> {{element.dateOpened | date:'yyyy-MM-dd'}}</mat-cell>\\r\\n    </ng-container>\\r\\n    <ng-container matColumnDef=\\\"urgency\\\">\\r\\n      <mat-header-cell *matHeaderCellDef> Urgency </mat-header-cell>>\\r\\n      <mat-cell *matCellDef=\\\"let element\\\"> {{element.urgency}} </mat-cell>>\\r\\n    </ng-container>\\r\\n    <ng-container matColumnDef=\\\"status\\\">\\r\\n      <mat-header-cell *matHeaderCellDef> Status </mat-header-cell>>\\r\\n      <mat-cell *matCellDef=\\\"let element\\\" [className]=\\\"element.status === emergencyStatus ? 'warn':''\\\">\\r\\n        {{element.status}}\\r\\n      </mat-cell>\\r\\n    </ng-container>\\r\\n    <ng-container matColumnDef=\\\"note\\\">\\r\\n      <mat-header-cell *matHeaderCellDef> Notes </mat-header-cell>>\\r\\n      <mat-cell *matCellDef=\\\"let element\\\">\\r\\n        <a (click)=\\\"editNote(element)\\\" mat-button>{{element.note?.noteType}}</a>\\r\\n         </mat-cell>>\\r\\n    </ng-container>\\r\\n\\r\\n    <mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></mat-header-row>>\\r\\n    <mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></mat-row>>\\r\\n  </mat-table>\\r\\n  <mat-paginator fxShow=\\\"false\\\"></mat-paginator>\\r\\n\"","import {Component, Input, OnInit, ViewChild} from '@angular/core';\r\nimport {CaseManagement} from \"../models/case-management\";\r\nimport {MatDialog, MatDialogConfig, MatPaginator, MatTableDataSource} from '@angular/material';\r\nimport {CaseManagementStatus} from \"./../../core/enums/case-management-status.enum\";\r\nimport {NotesComponent} from \"../dialogs/notes/notes.component\";\r\nimport {AppService} from \"../../app.service\";\r\n\r\n@Component({\r\n  selector: 'app-case-management',\r\n  templateUrl: './case-management.component.html'\r\n})\r\nexport class CaseManagementComponent implements OnInit {\r\n  @Input() caseManagement: CaseManagement[]=[];\r\n  displayedColumns: string[] = ['ticketNumber', 'dateOpened', 'urgency', 'status', 'note'];\r\n  emergencyStatus: CaseManagementStatus = CaseManagementStatus[CaseManagementStatus.Emergency];\r\n  dataSource: MatTableDataSource<CaseManagement>;\r\n  @ViewChild(MatPaginator) paginator: MatPaginator;\r\n\r\n  constructor(private appService: AppService, private dialog: MatDialog) { }\r\n\r\n  ngOnInit() {\r\n    this.dataSource = new MatTableDataSource<CaseManagement>(this.caseManagement);\r\n    this.paginator.pageSize = 5;\r\n    this.dataSource.paginator = this.paginator;\r\n  }\r\n\r\n  editNote(item: CaseManagement) {\r\n    const dialogConfig = new MatDialogConfig();\r\n    dialogConfig.disableClose = false;\r\n    dialogConfig.autoFocus = true;\r\n    dialogConfig.height = '450px';\r\n    dialogConfig.width = '500px';\r\n    dialogConfig.data = item;\r\n    const dialogRef = this.dialog.open(NotesComponent, dialogConfig);\r\n    dialogRef.afterClosed().subscribe(\r\n      val => {\r\n        if(val){\r\n          item = val;\r\n        }\r\n      });\r\n  }\r\n}\r\n","import {NgModule} from '@angular/core';\r\nimport {RouterModule, Routes} from '@angular/router';\r\n\r\nimport {CustomerComponent} from './customer.component';\r\n\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: CustomerComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class CustomerRoutingModule { }\r\n","module.exports = \"\\r\\n<div *ngIf=\\\"dataCount > 0\\\" fxFlexFill>\\r\\n  <mat-toolbar color=\\\"warn\\\" class=\\\"mat-body-2 mat-elevation-z1 mat-headline\\\" style=\\\"height: 45px\\\">\\r\\n        <span>{{organizationData.bp_name}}</span>\\r\\n  </mat-toolbar>\\r\\n<div *ngIf=\\\"locations.length > 0\\\" fxLayout=\\\"row\\\">\\r\\n<mat-toolbar color=\\\"accent\\\" class=\\\"mat-elevation-z1 Aligner-item--bottom\\\" style=\\\"height: 50px\\\">\\r\\n  <div fxFlex=\\\"0 1 22%\\\">\\r\\n    <div class=\\\"mat-body-2\\\" fxFlex=\\\"0 1 40%\\\">\\r\\n      <span>Ship-To-Location: </span>\\r\\n    </div>\\r\\n    <div fxFlex=\\\"0 1 60%\\\">\\r\\n        <mat-select (selectionChange)=\\\"setContact($event.value)\\\" [(value)]=\\\"currentLocationId\\\" placeholder=\\\"Select Location\\\">\\r\\n          <mat-option *ngFor=\\\"let location of locations\\\" [value]=\\\"location.id\\\">\\r\\n            {{location.city}}\\r\\n          </mat-option>\\r\\n        </mat-select>\\r\\n    </div>\\r\\n  </div>\\r\\n\\r\\n  <div *ngIf=\\\"currentContact\\\" fxFlex=\\\"0 1 88%\\\"  class=\\\"mat-body-strong Aligner\\\">\\r\\n        <div fxFlex=\\\"0 1 15%\\\" style=\\\"font-size:larger;\\\">\\r\\n          <mat-icon class=\\\"icon\\\">person</mat-icon>\\r\\n            {{ currentContact.firstName}} {{ currentContact.lastName}}\\r\\n        </div>\\r\\n        <div fxFlex=\\\"0 1 20%\\\">\\r\\n          <span>{{ currentContact.jobTitle}}</span>\\r\\n        </div>\\r\\n        <div fxFlex=\\\"0 1 20%\\\">\\r\\n          <span>{{ currentContact.email}}</span>\\r\\n        </div>\\r\\n        <div fxFlex=\\\"0 1 15%\\\">\\r\\n          <span>{{ currentContact.phone}}</span>\\r\\n        </div>\\r\\n        <div fxFlex=\\\"0 1 10%\\\">\\r\\n        <span>{{currentContact.address.city }}, {{ currentContact.address.state }}</span>\\r\\n        </div>\\r\\n        <div fxFlex=\\\"0 1 10%\\\">\\r\\n        <span>{{currentContact.address.country }}, {{ currentContact.address.zip }}</span>\\r\\n        </div>\\r\\n        <div fxFlex=\\\"0 1 5%\\\" class=\\\"Aligner-item--bottom\\\">\\r\\n          <a (click)=\\\"editContactInfo()\\\" mat-button>Edit Address</a>\\r\\n        </div>\\r\\n      </div>\\r\\n</mat-toolbar>\\r\\n  </div>\\r\\n<div fxLayout=\\\"row wrap\\\" fxLayoutGap=\\\"5px\\\" fxLayout.lt-md=\\\"column\\\" *ngIf=\\\"currentContact\\\" style=\\\"padding-bottom: 1px;\\\">\\r\\n    <ng-container>\\r\\n      <mat-toolbar class=\\\"mat-elevation-z1\\\" style=\\\"height: 50px\\\">\\r\\n          <mat-icon class=\\\"mat-24\\\">room</mat-icon>\\r\\n          <div fxFlex=\\\"20%\\\" fxLayoutAlign=\\\"flex-start\\\">\\r\\n            <span>{{currentContact.address.street }} - {{ currentContact.address.city }}  {{ currentContact.address.country }}</span>\\r\\n          </div>\\r\\n          <div fxFlex=\\\"80%\\\" fxLayoutAlign=\\\"flex-end\\\">\\r\\n            <mat-chip-list>\\r\\n              <mat-chip [routerLink]=\\\"['../quotes/quote-form']\\\">+ New Quote</mat-chip>\\r\\n              <mat-chip [routerLink]=\\\"['../orders/order-form']\\\">+ New Order</mat-chip>\\r\\n            </mat-chip-list>\\r\\n          </div>\\r\\n      </mat-toolbar>\\r\\n    </ng-container>\\r\\n  </div>\\r\\n<div fxLayout=\\\"row wrap\\\" fxLayout.xs=\\\"column\\\" fxLayout.sm=\\\"column\\\" fxLayoutWrap fxLayoutAlign=\\\"center\\\"\\r\\n     *ngIf=\\\"currentContact\\\">\\r\\n    <ng-container *ngIf=\\\"currentView === allViewScreens[0]\\\">\\r\\n      <mat-card fxFlex=\\\"1 1 calc(28%)\\\">\\r\\n      <mat-card-header>\\r\\n        <mat-card-title>\\r\\n          Install Base <span *ngIf=\\\"installBaseData.length > 0\\\" class=\\\"mat-body-1\\\">(5 of {{installBaseData.length}} Machines)\\r\\n        </span>\\r\\n        </mat-card-title>\\r\\n      </mat-card-header>\\r\\n      <mat-card-content *ngIf=\\\"installBaseData.length > 0\\\">\\r\\n        <app-install-base [installBaseData]=\\\"installBaseData\\\"></app-install-base>\\r\\n      </mat-card-content>\\r\\n    </mat-card>\\r\\n      <mat-card fxFlex=\\\"1 2 calc(25%)\\\">\\r\\n        <mat-card-header>\\r\\n          <mat-card-title>\\r\\n            Quick Account Aging\\r\\n            <span *ngIf=\\\"quickAccountAgingData.length > 0\\\" class=\\\"mat-body-1\\\">\\r\\n              <mat-icon class=\\\"mat-icon icon\\\">account_circle</mat-icon>Linda Olson?\\r\\n            </span>\\r\\n          </mat-card-title>\\r\\n        </mat-card-header>\\r\\n        <mat-card-content *ngIf=\\\"quickAccountAgingData.length > 0\\\">\\r\\n          <app-quick-account-aging [quickAccountAgingData]=\\\"quickAccountAgingData\\\"></app-quick-account-aging>\\r\\n        </mat-card-content>\\r\\n      </mat-card>\\r\\n      <mat-card fxFlex=\\\"1 1 calc(38%)\\\">\\r\\n      <mat-card-header>\\r\\n        <mat-card-title>\\r\\n          Case Management\\r\\n          <span *ngIf=\\\"caseManagementData.length > 0\\\" class=\\\"mat-body-1\\\">(5 of {{caseManagementData.length}} Tickets)\\r\\n          </span>\\r\\n        </mat-card-title>\\r\\n      </mat-card-header>\\r\\n      <mat-card-content *ngIf=\\\"caseManagementData.length > 0\\\">\\r\\n        <app-case-management [caseManagement]=\\\"caseManagementData\\\"></app-case-management>\\r\\n      </mat-card-content>\\r\\n    </mat-card>\\r\\n      <mat-card fxFlex=\\\"0 1 50%\\\">\\r\\n      <mat-card-header>\\r\\n        <mat-card-title>\\r\\n          Open Quotations\\r\\n          <span *ngIf=\\\"quotationsData.length > 0\\\" class=\\\"mat-body-1\\\">(6 of {{quotationsData.length}}) |\\r\\n          <a mat-button (click)=\\\"currentView = allViewScreens[1]\\\">View All</a>\\r\\n        </span>\\r\\n        </mat-card-title>\\r\\n      </mat-card-header>\\r\\n      <mat-card-content *ngIf=\\\"quotationsData.length > 0\\\">\\r\\n        <app-open-quotes [openQuotes]=\\\"quotationsData\\\"></app-open-quotes>\\r\\n      </mat-card-content>\\r\\n    </mat-card>\\r\\n      <mat-card fxFlex=\\\"0 1 50%\\\">\\r\\n        <app-open-orders [ordersData]=\\\"ordersData\\\" *ngIf=\\\"ordersData.length > 0\\\"></app-open-orders>\\r\\n      </mat-card>\\r\\n    </ng-container>\\r\\n  <ng-container *ngIf=\\\"currentView !== allViewScreens[0]\\\">\\r\\n    <div fxFill *ngIf=\\\"currentView === allViewScreens[1]\\\">\\r\\n      <mat-card fxFlex=\\\"0 1 100%\\\">\\r\\n        <mat-card-header>\\r\\n          <mat-card-title>\\r\\n            All Quotations\\r\\n            <span *ngIf=\\\"quotationsData.length > 0\\\" class=\\\"mat-body-1\\\">(6 of {{quotationsData.length}}) |\\r\\n          <a (click)=\\\"currentView = allViewScreens[0]\\\" mat-button><< Back</a>\\r\\n        </span>\\r\\n          </mat-card-title>\\r\\n        </mat-card-header>\\r\\n        <mat-card-content *ngIf=\\\"quotationsData.length > 0\\\">\\r\\n          <app-open-quotes [openQuotes]=\\\"quotationsData\\\"></app-open-quotes>\\r\\n        </mat-card-content>\\r\\n      </mat-card>\\r\\n    </div>\\r\\n    <div fxFill *ngIf=\\\"currentView === allViewScreens[2]\\\">\\r\\n      <app-all-orders [contactId]=\\\"currentContact.id\\\"></app-all-orders>\\r\\n    </div>\\r\\n    <div fxFill *ngIf=\\\"currentView === allViewScreens[3]\\\">\\r\\n      <mat-card fxFlex=\\\"0 1 100%\\\">\\r\\n        <mat-card-header>\\r\\n          <mat-card-title>\\r\\n            All Install Base <span *ngIf=\\\"installBaseData.length > 0\\\" class=\\\"mat-body-1\\\">(5 of {{installBaseData.length}} Machines) |\\r\\n          <a (click)=\\\"currentView = allViewScreens[0]\\\" mat-button><< Back</a>\\r\\n        </span>\\r\\n          </mat-card-title>\\r\\n        </mat-card-header>\\r\\n          <app-install-base [installBaseData]=\\\"installBaseData\\\"></app-install-base>\\r\\n      </mat-card>\\r\\n    </div>\\r\\n    <div fxFill *ngIf=\\\"currentView === allViewScreens[4]\\\">\\r\\n      <mat-card fxFlex=\\\"0 1 100%\\\">\\r\\n        <mat-card-header>\\r\\n          <mat-card-title>\\r\\n            Case Management\\r\\n            <span *ngIf=\\\"caseManagementData.length > 0\\\" class=\\\"mat-body-1\\\">(5 of {{caseManagementData.length}} Tickets) |\\r\\n           <a (click)=\\\"currentView = allViewScreens[0]\\\" mat-button><< Back</a>\\r\\n          </span>\\r\\n          </mat-card-title>\\r\\n        </mat-card-header>\\r\\n        <mat-card-content *ngIf=\\\"caseManagementData.length > 0\\\">\\r\\n          <app-case-management [caseManagement]=\\\"caseManagementData\\\"></app-case-management>\\r\\n        </mat-card-content>\\r\\n      </mat-card>\\r\\n    </div>\\r\\n  </ng-container>\\r\\n  <ng-container *ngIf=\\\"dataCount < maxCount\\\">\\r\\n    <div fxLayout=\\\"row\\\" fxLaoutAlign=\\\"center\\\" class=\\\"loading-spinner\\\">\\r\\n      <mat-spinner></mat-spinner>\\r\\n    </div>\\r\\n  </ng-container>\\r\\n  </div >\\r\\n</div>\\r\\n\"","import {Component, OnDestroy, OnInit} from '@angular/core';\r\nimport {IInstallBase, InstallBase} from \"./models/install-base\";\r\nimport {CaseManagement, ICaseManagement} from \"./models/case-management\";\r\nimport {IQuickAccountAging, QuickAccountAging} from \"./models/quick-account-aging\";\r\nimport {IOrganization, Organization} from \"../shared/models/organization\";\r\nimport {IQuotation, Quotation} from \"../shared/models/quotation\";\r\nimport {AppService} from \"../app.service\";\r\nimport {Address} from \"../shared/models/address\";\r\nimport {Contact} from \"../shared/models/contact\";\r\nimport {AppSettings} from \"../core/app-settings\";\r\nimport {MatDialog, MatDialogConfig} from \"@angular/material\";\r\nimport {ContactInfoComponent} from \"./dialogs/contact-info/contact-info.component\";\r\nimport {CustomerService, VIEW_SCREENS} from \"./customer.service\";\r\nimport {ISalesOrder, SalesOrder} from \"../shared/models/sales-order\";\r\n\r\n@Component({\r\n  selector: 'app-customer',\r\n  templateUrl: './customer.component.html'\r\n})\r\nexport class CustomerComponent implements OnInit, OnDestroy {\r\n  orgId = 0;\r\n  dataCount=0;\r\n  maxCount = 7;\r\n  installBaseData: InstallBase[] = [];\r\n  caseManagementData: CaseManagement[] = [];\r\n  quickAccountAgingData: QuickAccountAging[] = [];\r\n  quotationsData: Quotation[] = [];\r\n  ordersData: SalesOrder[] = [];\r\n  organizationData: Organization;\r\n  contacts: Contact[]=[];\r\n  locations: Address[]=[];\r\n  currentContact: Contact;\r\n  currentLocationId = 0;\r\n  allViewScreens  = VIEW_SCREENS;\r\n  currentView = VIEW_SCREENS[0];\r\n\r\n\r\n  constructor(private appService: AppService,\r\n              private customerService: CustomerService,\r\n              private dialog: MatDialog) {\r\n    customerService.viewIndx.subscribe(val => this.currentView = this.allViewScreens[val]);\r\n  }\r\n\r\n  ngOnInit() {\r\n    if(this.orgId > 0){\r\n      this.getOrganizationData(this.orgId)\r\n    }\r\n    this.appService.showCustomerSearch.next(true);\r\n    this.appService.onCustomerFound.subscribe(\r\n      id => {\r\n        this.orgId = id;\r\n        this.getOrganizationData(id);\r\n    });\r\n  }\r\n\r\n  getOrganizationData(orgId: number){\r\n    //organization data\r\n    this.appService.getData<IOrganization>(`${AppSettings.organizationApi}/${orgId}`)\r\n      .subscribe(data => {\r\n        this.organizationData = new Organization(data as IOrganization);\r\n        this.dataCount = this.organizationData !== undefined ? this.dataCount + 1 : this.dataCount=this.maxCount;\r\n        this.contacts = this.organizationData.contacts;\r\n        this.locations = this.contacts.map(c => c.address);\r\n      });\r\n  }\r\n\r\n  setContact(addressId: number){\r\n    this.currentContact = this.contacts.find(c=> c.address.id === addressId);\r\n    this.currentContact.companyName = this.organizationData.bp_name;\r\n    this.currentLocationId = addressId;\r\n    this.dataCount = 2;\r\n    this.getData();\r\n  }\r\n\r\n  getData(){\r\n\r\n    //quick account aging data\r\n    this.appService.getData<IQuickAccountAging[]>(`${AppSettings.quickAccountAgingApi}`)\r\n      .subscribe(data => {\r\n        this.quickAccountAgingData = (data as IQuickAccountAging[])\r\n        .map(item => new QuickAccountAging(item as IQuickAccountAging));\r\n        this.dataCount = this.dataCount + 1;\r\n      });\r\n\r\n    //case management data\r\n    this.appService.getData<ICaseManagement[]>(AppSettings.caseManagementApi)\r\n      .subscribe(data => {\r\n        this.caseManagementData = (data as ICaseManagement[])\r\n        .map(item => new CaseManagement(item as ICaseManagement));\r\n        this.dataCount = this.dataCount + 1;\r\n      });\r\n\r\n    // install base data\r\n    this.appService.getData<IInstallBase[]>(AppSettings.installBaseApi)\r\n      .subscribe(data => {this.installBaseData = (data as IInstallBase[])\r\n        .map(item => new InstallBase(item as IInstallBase));\r\n        this.dataCount = this.dataCount + 1;\r\n      });\r\n\r\n    //open quotation data\r\n    this.appService.getData<IQuotation[]>(AppSettings.openQuotationsApi)\r\n      .subscribe(data => {this.quotationsData = (data as IQuotation[])\r\n        .map(item => new Quotation(item as IQuotation));\r\n        this.dataCount = this.dataCount + 1;\r\n      });\r\n\r\n    //open sales orders\r\n    this.appService.getData<ISalesOrder[]>(AppSettings.openSalesOrderApi)\r\n      .subscribe(data => {this.ordersData = (data as ISalesOrder[])\r\n        .map(item => new SalesOrder(item as ISalesOrder));\r\n        this.dataCount = this.dataCount + 1;\r\n      });\r\n  }\r\n\r\n  editContactInfo(){\r\n    const dialogConfig = new MatDialogConfig();\r\n    dialogConfig.disableClose = true;\r\n    dialogConfig.autoFocus = true;\r\n    dialogConfig.height = '550px';\r\n    dialogConfig.width = '350px';\r\n    dialogConfig.data = this.currentContact;\r\n    const dialogRef = this.dialog.open(ContactInfoComponent, dialogConfig);\r\n    dialogRef.afterClosed().subscribe(\r\n      val => {\r\n        if(val){\r\n          this.currentContact = val;\r\n          this.organizationData.bp_name = this.currentContact.companyName;\r\n        }\r\n      });\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.appService.showCustomerSearch.next(false);\r\n  }\r\n}\r\n","import {NgModule} from '@angular/core';\r\nimport {CustomerRoutingModule} from './customer-routing.module';\r\nimport {CustomerComponent} from \"./customer.component\";\r\nimport {SharedModule} from \"../shared/shared.module\";\r\nimport {CommonModule} from \"@angular/common\";\r\nimport {InstallBaseComponent} from './install-base/install-base.component';\r\nimport {QuickAccountAgingComponent} from './quick-account-aging/quick-account-aging.component';\r\nimport {CaseManagementComponent} from './case-management/case-management.component';\r\nimport {OpenQuotesComponent} from './open-quotes/open-quotes.component';\r\nimport {OpenOrdersComponent} from './open-orders/open-orders.component';\r\nimport { ContactInfoComponent } from './dialogs/contact-info/contact-info.component';\r\nimport { NotesComponent } from './dialogs/notes/notes.component';\r\nimport { AllOrdersComponent } from './all-orders/all-orders.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    SharedModule,\r\n    CustomerRoutingModule\r\n  ],\r\n  declarations: [\r\n    CustomerComponent,\r\n    InstallBaseComponent,\r\n    QuickAccountAgingComponent,\r\n    CaseManagementComponent,\r\n    OpenQuotesComponent,\r\n    OpenOrdersComponent,\r\n    ContactInfoComponent,\r\n    NotesComponent,\r\n    AllOrdersComponent\r\n  ],\r\n  entryComponents: [\r\n    ContactInfoComponent,\r\n    NotesComponent\r\n  ]\r\n})\r\nexport class CustomerModule { }\r\n","import {EventEmitter, Injectable} from '@angular/core';\r\n\r\nexport const VIEW_SCREENS = ['All','Quotations','Orders','Install Base','Case Management'];\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CustomerService {\r\n\r\n  public viewIndx = new EventEmitter<number>(false);\r\n}\r\n","module.exports = \"<div fxLayout=\\\"column\\\" >\\r\\n<h2 mat-dialog-title>New Note</h2>\\r\\n<mat-dialog-content [formGroup]=\\\"form\\\" class=\\\"form\\\">\\r\\n  <mat-form-field fxFlexFill class=\\\"full-width\\\">\\r\\n    <mat-select placeholder=\\\"Select note type\\\" formControlName=\\\"noteType\\\">\\r\\n      <mat-option value=\\\"Info\\\">Info</mat-option>\\r\\n      <mat-option value=\\\"Warning\\\">Warning</mat-option>\\r\\n      <mat-option value=\\\"Error\\\">Error</mat-option>\\r\\n    </mat-select>\\r\\n  </mat-form-field>\\r\\n  <mat-form-field class=\\\"full-width\\\" >\\r\\n    <textarea matInput placeholder=\\\"Note Text\\\" formControlName=\\\"noteText\\\" rows=\\\"10\\\"></textarea>\\r\\n  </mat-form-field>\\r\\n</mat-dialog-content>\\r\\n\\r\\n<mat-dialog-actions>\\r\\n  <button class=\\\"mat-raised-button\\\" (click)=\\\"close()\\\">\\r\\n    Close\\r\\n  </button>\\r\\n  <button class=\\\"mat-raised-button mat-primary\\\" (click)=\\\"save()\\\">\\r\\n    Save\\r\\n  </button>\\r\\n</mat-dialog-actions>\\r\\n</div>\\r\\n\"","import {Component, Inject} from '@angular/core';\r\nimport {FormBuilder, FormGroup, Validators} from \"@angular/forms\";\r\nimport {AppService} from \"../../../app.service\";\r\nimport {MAT_DIALOG_DATA, MatDialogRef} from \"@angular/material\";\r\nimport {AppSettings} from \"../../../core/app-settings\";\r\nimport {Note} from \"../../../shared/models/note\";\r\nimport {CaseManagement} from \"../../models/case-management\";\r\n\r\n@Component({\r\n  selector: 'app-notes',\r\n  templateUrl: './notes.component.html'\r\n})\r\nexport class NotesComponent {\r\n  form: FormGroup;\r\n  note: Note;\r\n  caseManagementItem: CaseManagement;\r\n\r\n  constructor(private appService: AppService,\r\n              private fb: FormBuilder,\r\n              private dialogRef: MatDialogRef<NotesComponent>,\r\n              @Inject(MAT_DIALOG_DATA) item: CaseManagement)\r\n  {\r\n    this.caseManagementItem = item;\r\n    this.note = item.note;\r\n\r\n    this.form = fb.group({\r\n      noteType: [this.note.noteType, Validators.required],\r\n      noteText: [this.note.noteText, Validators.required]\r\n    })\r\n  }\r\n\r\n  save() {\r\n    this.caseManagementItem.note.noteType= this.form.value['noteType'];\r\n    this.caseManagementItem.note.noteText = this.form.value['noteText'];\r\n\r\n    this.appService.update(AppSettings.updateCaseManagementApi, this.caseManagementItem.id, this.caseManagementItem)\r\n      .subscribe(() => {\r\n        this.dialogRef.close(this.caseManagementItem);\r\n        this.appService.log(\"Note Info has been updated.\")\r\n      });\r\n  }\r\n\r\n  close() {\r\n    this.dialogRef.close();\r\n  }\r\n}\r\n","module.exports = \"\\r\\n<mat-table [dataSource]=\\\"dataSource\\\" class=\\\"mat-elevation-z8\\\">\\r\\n  <ng-container matColumnDef=\\\"machineNumber\\\">\\r\\n    <mat-header-cell *matHeaderCellDef> Machine # </mat-header-cell>\\r\\n    <mat-cell *matCellDef=\\\"let element\\\"> {{element.machineNumber}} </mat-cell>\\r\\n  </ng-container>\\r\\n  <ng-container matColumnDef=\\\"dateInstalled\\\">\\r\\n    <mat-header-cell *matHeaderCellDef> Date Installed </mat-header-cell>\\r\\n    <mat-cell *matCellDef=\\\"let element\\\"> {{element.dateInstalled | date:'yyyy-MM-dd'}}</mat-cell>\\r\\n  </ng-container>\\r\\n  <ng-container matColumnDef=\\\"id\\\">\\r\\n    <mat-header-cell *matHeaderCellDef></mat-header-cell>\\r\\n    <mat-cell *matCellDef=\\\"let element\\\">View BOM</mat-cell>\\r\\n  </ng-container>\\r\\n\\r\\n  <mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></mat-header-row>\\r\\n  <mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></mat-row>\\r\\n</mat-table>\\r\\n<mat-paginator fxShow=\\\"false\\\"></mat-paginator>\\r\\n\"","import {Component, Input, OnInit, ViewChild} from '@angular/core';\r\nimport {MatTableDataSource, MatPaginator} from \"@angular/material\";\r\nimport {InstallBase} from \"../models/install-base\";\r\n\r\n@Component({\r\n  selector: 'app-install-base',\r\n  templateUrl: './install-base.component.html'\r\n})\r\nexport class InstallBaseComponent implements OnInit {\r\n  @Input() installBaseData: InstallBase[]=[];\r\n  displayedColumns: string[] = ['machineNumber', 'dateInstalled', 'id'];\r\n  dataSource: MatTableDataSource<InstallBase>;\r\n  @ViewChild(MatPaginator) paginator: MatPaginator;\r\n\r\n  ngOnInit() {\r\n    this.dataSource = new MatTableDataSource<InstallBase>(this.installBaseData);\r\n    this.paginator.pageSize = 5;\r\n    this.dataSource.paginator = this.paginator;\r\n  }\r\n}\r\n","import {Entity, IEntity} from \"../../shared/models/entity\";\r\nimport {INote, Note} from \"../../shared/models/note\";\r\n\r\nexport class CaseManagement extends  Entity{\r\n  public contact_id:number;\r\n  public ticketNumber: number;\r\n  public dateOpened: Date;\r\n  public urgency: string;\r\n  public status: string;\r\n  public note: Note;\r\n\r\n  constructor(cm: ICaseManagement){\r\n    super(cm.id);\r\n    this.contact_id = cm.contact_id;\r\n    this.ticketNumber = cm.ticketNumber;\r\n    this.dateOpened = new Date(cm.dateOpened);\r\n    this.urgency = cm.urgency;\r\n    this.status = cm.status;\r\n    this.note = cm.note;\r\n  }\r\n}\r\n\r\nexport interface ICaseManagement extends IEntity{\r\n  contact_id:number;\r\n  ticketNumber: number;\r\n  dateOpened: string;\r\n  urgency: string;\r\n  status: string;\r\n  note: INote;\r\n}\r\n","import {Entity, IEntity} from \"../../shared/models/entity\";\r\n\r\nexport class InstallBase extends  Entity{\r\n  public machineNumber: number;\r\n  public dateInstalled: Date;\r\n  public customerId:number;\r\n\r\n  constructor(ib: IInstallBase){\r\n    super(ib.id);\r\n    this.customerId = ib.customerId,\r\n      this.dateInstalled = new Date(ib.dateInstalled),\r\n      this.machineNumber = ib.machineNumber\r\n  }\r\n}\r\n\r\nexport interface IInstallBase extends IEntity{\r\n  machineNumber: number;\r\n  dateInstalled: string;\r\n  customerId:number;\r\n}\r\n","import {Entity, IEntity} from \"../../shared/models/entity\";\r\n\r\nexport class QuickAccountAging extends Entity{\r\n  public agingTerm: string;\r\n  public amount: number;\r\n  public currencyCode: string;\r\n\r\n  constructor(qaa: IQuickAccountAging){\r\n    super(qaa.id);\r\n    this.agingTerm = qaa.agingTerm,\r\n      this.amount = qaa.amount,\r\n      this.currencyCode = qaa.currencyCode\r\n  }\r\n}\r\n\r\nexport interface IQuickAccountAging extends IEntity{\r\n  agingTerm: string;\r\n  amount: number;\r\n  currencyCode: string;\r\n}\r\n","module.exports = \"\\r\\n  <ng-template #loading>\\r\\n    <mat-spinner color=\\\"primary\\\" diameter=\\\"30\\\" strokeWidth=\\\"20\\\" value=\\\"100\\\"></mat-spinner>\\r\\n  </ng-template>\\r\\n  <mat-card-header>\\r\\n    <mat-card-title>\\r\\n      Open Sales Orders\\r\\n      <span *ngIf=\\\"ordersData.length > 0\\\" class=\\\"mat-body-1\\\">(6 of {{ordersData.length}}) |\\r\\n          <a (click)=\\\"toggleView(2)\\\" mat-button>View All</a>\\r\\n          </span>\\r\\n    </mat-card-title>\\r\\n  </mat-card-header>\\r\\n  <mat-card-content >\\r\\n    <table mat-table [dataSource]=\\\"dataSource\\\" *ngIf=\\\"ordersData.length > 0; else loading\\\" matSort class=\\\"mat-elevation-z8\\\" fxFlexFill>\\r\\n      <ng-container matColumnDef=\\\"quoteNumber\\\">\\r\\n        <th mat-header-cell *matHeaderCellDef> Quotation </th>\\r\\n        <td mat-cell *matCellDef=\\\"let element\\\">\\r\\n          {{element.quoteNumber}}\\r\\n        </td>\\r\\n      </ng-container>\\r\\n\\r\\n      <ng-container matColumnDef=\\\"soldToBPName\\\">\\r\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> BP Name </th>\\r\\n        <td mat-cell *matCellDef=\\\"let element\\\"> {{element.soldToBPName}} </td>\\r\\n      </ng-container>\\r\\n\\r\\n      <ng-container matColumnDef=\\\"soldToBP\\\">\\r\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> BP # </th>\\r\\n        <td mat-cell *matCellDef=\\\"let element\\\"> {{element.soldToBP}} </td>\\r\\n      </ng-container>\\r\\n\\r\\n      <ng-container matColumnDef=\\\"totalUSD\\\">\\r\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> Total $</th>\\r\\n        <td mat-cell *matCellDef=\\\"let element\\\"> {{element.totalUSD | currency}} </td>\\r\\n      </ng-container>\\r\\n\\r\\n      <ng-container matColumnDef=\\\"plannedDeliveryDate\\\">\\r\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> Planned Delivery </th>\\r\\n        <td mat-cell *matCellDef=\\\"let element\\\"> {{element.plannedDeliveryDate | date: 'yyyy-MM-dd'}} </td>\\r\\n      </ng-container>\\r\\n\\r\\n      <ng-container matColumnDef=\\\"plannedReceiptDate\\\">\\r\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> Promised Date </th>\\r\\n        <td mat-cell *matCellDef=\\\"let element\\\"> {{element.plannedReceiptDate | date: 'yyyy-MM-dd'}} </td>\\r\\n      </ng-container>\\r\\n\\r\\n      <ng-container matColumnDef=\\\"postalAddress\\\">\\r\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> Postal Code </th>\\r\\n        <td mat-cell *matCellDef=\\\"let element\\\"> {{element.postalAddress}} </td>\\r\\n      </ng-container>\\r\\n\\r\\n      <ng-container matColumnDef=\\\"quotationStatus\\\">\\r\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> Status </th>\\r\\n        <td mat-cell *matCellDef=\\\"let element\\\"\\r\\n            [className]=\\\"(element.quotationStatus === internalHold || element.quotationStatus === creditHold) ? 'warn':''\\\">\\r\\n          {{element.quotationStatus}}\\r\\n        </td>\\r\\n      </ng-container>\\r\\n\\r\\n      <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\r\\n      <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\r\\n    </table>\\r\\n    <mat-paginator ></mat-paginator>\\r\\n  </mat-card-content>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\"","import {Component, Input, OnInit, ViewChild} from '@angular/core';\r\nimport {MatPaginator, MatSort, MatTableDataSource} from \"@angular/material\";\r\nimport {SalesOrder} from \"../../shared/models/sales-order\";\r\nimport {CustomerService} from \"../customer.service\";\r\n\r\n@Component({\r\n  selector: 'app-open-orders',\r\n  templateUrl: './open-orders.component.html'\r\n})\r\n\r\nexport class OpenOrdersComponent implements OnInit {\r\n  @Input() ordersData: SalesOrder[]=[];\r\n  displayedColumns: string[] = [\r\n    'quoteNumber', 'soldToBPName', 'soldToBP',\r\n    'totalUSD', 'plannedDeliveryDate', 'quotationStatus'\r\n  ];\r\n\r\n  internalHold = 'Internal Hold';\r\n  creditHold = 'Credit Hold';\r\n\r\n  dataSource: MatTableDataSource<SalesOrder>;\r\n  @ViewChild(MatPaginator) paginator: MatPaginator;\r\n  @ViewChild(MatSort) sort: MatSort;\r\n\r\n  constructor(private customerService: CustomerService) { }\r\n\r\n  ngOnInit() {\r\n    this.dataSource = new MatTableDataSource<SalesOrder>(this.ordersData);\r\n    this.paginator.pageSize = 6;\r\n    this.dataSource.paginator = this.paginator;\r\n    this.dataSource.sort = this.sort;\r\n  }\r\n\r\n  toggleView(viewIndex: number){\r\n    this.customerService.viewIndx.next(viewIndex)\r\n  }\r\n}\r\n","module.exports = \"\\r\\n<table mat-table [dataSource]=\\\"dataSource\\\" matSort class=\\\"mat-elevation-z8\\\" fxFlexFill>\\r\\n\\r\\n  <ng-container matColumnDef=\\\"quoteNumber\\\">\\r\\n    <th mat-header-cell *matHeaderCellDef> Quotation </th>\\r\\n    <td mat-cell *matCellDef=\\\"let element\\\">\\r\\n      {{element.quoteNumber}}\\r\\n    </td>\\r\\n  </ng-container>\\r\\n\\r\\n  <ng-container matColumnDef=\\\"soldToBPName\\\">\\r\\n    <th mat-header-cell *matHeaderCellDef mat-sort-header> BP Name </th>\\r\\n    <td mat-cell *matCellDef=\\\"let element\\\"> {{element.soldToBPName}} </td>\\r\\n  </ng-container>\\r\\n\\r\\n  <ng-container matColumnDef=\\\"soldToBP\\\">\\r\\n    <th mat-header-cell *matHeaderCellDef mat-sort-header> BP # </th>\\r\\n    <td mat-cell *matCellDef=\\\"let element\\\"> {{element.soldToBP}} </td>\\r\\n  </ng-container>\\r\\n\\r\\n  <ng-container matColumnDef=\\\"totalUSD\\\">\\r\\n    <th mat-header-cell *matHeaderCellDef mat-sort-header> Total $</th>\\r\\n    <td mat-cell *matCellDef=\\\"let element\\\"> {{element.totalUSD | currency}} </td>\\r\\n  </ng-container>\\r\\n\\r\\n  <ng-container matColumnDef=\\\"creationDate\\\">\\r\\n    <th mat-header-cell *matHeaderCellDef mat-sort-header> Date Created </th>\\r\\n    <td mat-cell *matCellDef=\\\"let element\\\"> {{element.creationDate | date: 'yyyy-MM-dd'}} </td>\\r\\n  </ng-container>\\r\\n\\r\\n  <ng-container matColumnDef=\\\"quotationStatus\\\">\\r\\n    <th mat-header-cell *matHeaderCellDef mat-sort-header> Status </th>\\r\\n    <td mat-cell *matCellDef=\\\"let element\\\"\\r\\n        [className]=\\\"element.quotationStatus === 'Modified' ? 'warn':''\\\"> {{element.quotationStatus}} </td>\\r\\n  </ng-container>\\r\\n\\r\\n  <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\r\\n  <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\r\\n</table>\\r\\n<mat-paginator></mat-paginator>\\r\\n\"","import {Component, Input, OnInit, ViewChild} from '@angular/core';\r\nimport {Quotation} from \"../../shared/models/quotation\";\r\nimport {MatPaginator, MatSort, MatTableDataSource} from \"@angular/material\";\r\n\r\n@Component({\r\n  selector: 'app-open-quotes',\r\n  templateUrl: './open-quotes.component.html'\r\n})\r\nexport class OpenQuotesComponent implements OnInit {\r\n@Input() openQuotes: Quotation[]=[];\r\n  displayedColumns: string[] =       [\r\n    'quoteNumber', 'soldToBPName', 'soldToBP',\r\n    'totalUSD', 'creationDate', 'quotationStatus'\r\n  ];\r\n  dataSource: MatTableDataSource<Quotation>;\r\n  @ViewChild(MatPaginator) paginator: MatPaginator;\r\n  @ViewChild(MatSort) sort: MatSort;\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n    this.dataSource = new MatTableDataSource<Quotation>(this.openQuotes);\r\n    this.paginator.pageSize = 6;\r\n    this.dataSource.paginator = this.paginator;\r\n    this.dataSource.sort = this.sort;\r\n  }\r\n}\r\n","module.exports = \"<mat-table [dataSource]=\\\"dataSource\\\"  class=\\\"mat-elevation-z8\\\">\\r\\n  <ng-container matColumnDef=\\\"agingTerm\\\">\\r\\n    <mat-header-cell *matHeaderCellDef> Total </mat-header-cell>>\\r\\n    <mat-cell *matCellDef=\\\"let element\\\"> {{element.agingTerm}} </mat-cell>>\\r\\n  </ng-container>\\r\\n  <ng-container matColumnDef=\\\"amount\\\">\\r\\n    <mat-header-cell *matHeaderCellDef> {{totalAmount | currency}} {{totalCurrencyCode}}</mat-header-cell>>\\r\\n    <mat-cell *matCellDef=\\\"let element\\\"> {{element.amount | currency}} {{element.currencyCode}}</mat-cell>>\\r\\n  </ng-container>\\r\\n\\r\\n  <mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></mat-header-row>>\\r\\n  <mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></mat-row>>\\r\\n</mat-table>\\r\\n<!--<mat-paginator fxShow=\\\"false\\\"></mat-paginator>-->\\r\\n\"","import {Component, Input, OnInit} from '@angular/core';\r\nimport { MatTableDataSource} from \"@angular/material\";\r\nimport {QuickAccountAging} from \"../models/quick-account-aging\";\r\n\r\n@Component({\r\n  selector: 'app-quick-account-aging',\r\n  templateUrl: './quick-account-aging.component.html'\r\n})\r\nexport class QuickAccountAgingComponent implements OnInit {\r\n  @Input() quickAccountAgingData: QuickAccountAging[]=[];\r\n  displayedColumns: string[] = ['agingTerm', 'amount'];\r\n  dataSource: MatTableDataSource<QuickAccountAging>;\r\n  totalAmount: number;\r\n  totalCurrencyCode: string;\r\n\r\n  ngOnInit() {\r\n    this.totalAmount = this.quickAccountAgingData.reduce(function(prev, cur) { return prev + cur.amount; }, 0) || 0;\r\n    this.totalCurrencyCode = this.quickAccountAgingData[0].currencyCode || '';\r\n    this.dataSource = new MatTableDataSource<QuickAccountAging>(this.quickAccountAgingData);\r\n  }\r\n}\r\n"],"sourceRoot":""}